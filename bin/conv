#!/usr/bin/env node
var events = require('../services/localEvent');
var pushbullet = require('../services/pushbullet');
var telegram = require('../services/telegram');

var path = require("path");
process.env['NODE_CONFIG_DIR'] = path.join(__dirname, "..", "config");
var gitdir = path.join(__dirname, "..", ".git");
var gitworktree = path.join(__dirname, "..");

var http = require("https");
var releaseUrl = {
  hostname: 'api.github.com',
	path: '/repos/kdsoo/mediaconverter/releases/latest',
  headers: { 'User-Agent': 'Mozilla/5.0' }
};

var spawn = require("child_process").spawn;
var spawnSync = require("child_process").spawnSync;
var fs = require('fs');
var rl = require("readline");
var progress = require("progress");
var config = require("config");

var cachedVersionFile = path.join(__dirname, "..", ".version");
// check version upgrade
updateVersion();


var source_formats = config.get("source.mediaformat");
var target_w = config.get("target.resolution.width");
var target_h = config.get("target.resolution.height");
var target_max_length = config.get("target.max_side_length");
var target_br = config.get("target.bitrate");
var target_name_tail = config.get("target.filename_tail");
var target_name_ext = config.get("target.mediaformat");		// file type to be converted
var removeoriginal = config.get("removeoriginal");

var keepOrig = false;
if (process.argv.length < 3) {
	console.error(process.argv.length, process.argv);
	process.exit(1)
} else if (process.argv.length == 4) {
	if (process.argv.indexOf("-k") > -1) {
		var index = process.argv.indexOf("-k");
		process.argv.splice(index, 1);
		console.log("Keep original media file");
		keepOrig = true;
	} else {
		console.error("Supported options");
		console.error("\t-k: keep original media file option");
		process.exit(1);
	}
}
var arg = process.argv[2]
var inputDir;
var fileList = [];
var totalFiles = 0;

// if arg is relative then make it absolute
// now arg is absolute
if (!path.isAbsolute(arg)) {
	console.log(arg, "is not absolute path");
	// if arg is file then inputDir is cwd and arg is file
	if (fs.lstatSync(path.join(process.cwd(), arg)).isFile()) {
		inputDir = path.dirname(path.join(process.cwd(), arg));
		arg = path.join(path.join(process.cwd(), arg));
	} else {
		inputDir = path.join(process.cwd(), arg);
		arg = path.join(process.cwd(), arg);
	}
} else {
	console.log(arg, "is absolute path");
	// if arg is file then inputDir is parent and arg is file
	// else arg is inputDir
	if (fs.lstatSync(arg).isFile()) {
		inputDir = path.dirname(arg);
	} else {
		inputDir = arg;
	}
}

console.log("Media file repository inputDir:", inputDir);
console.log("file or dir arg:", arg, "isFile?", fs.lstatSync(arg).isFile());
if (!fs.lstatSync(arg).isFile()) {
	// arg is directory. directory scan
	var files = fs.readdirSync(arg);
	for (var i = 0; i < files.length; i ++) {
		if (isMediaFile(files[i])) {
			// var file = {filename:filename, duration: duration, convres: convres};
			var meta = getVideoMeta(path.join(inputDir, files[i]));
			var filename = path.join(inputDir, files[i]);
			var duration = meta.duration * 1000000;
			var bitrate = meta.bit_rate;	// TODO: don't convert video with less than target.bitrate
			var convres = false;
			var file = {filename: filename, res: {w: -1, h: -1}
						, duration: duration, orig: {w:meta.width, h: meta.height}, convres: convres};
			// if target_max_length is set
			// then if meta.width > meta.height
			//         then target_res_width = target_max_length
			//      else target_res_height = target_max_length
			// else target_res_width = target_w and target_res_height = target_h
			if (target_max_length) {
				if (meta.width > meta.height) {
					if (meta.width > target_max_length) {
						file.res.w = target_max_length;
						file.convres = true;
						fileList.push(file);
						++totalFiles;
					} else if (bitrate > target_br * 1.5) {
						// only cares bitrate (convres = false)
						fileList.push(file);
						++totalFiles;
					} else {
						console.error(filename, "with resolution", meta.width, meta.height
						, "and bitrate", bitrate, "no need to be converted");
					}
				} else {
					if (meta.height > target_max_length) {
						file.res.h = target_max_length;
						file.convres = true;
						fileList.push(file);
						++totalFiles;
					} else if (bitrate > target_br * 1.5) {
						// only cares bitrate (convres = false)
						fileList.push(file);
						++totalFiles;
					} else {
						console.error(filename, "with resolution", meta.width, meta.height
						, "and bitrate", bitrate, "no need to be converted");
					}
				}
			} else {
				if (meta.width > target_w && meta.height > target_h) {
					file.res.w = target_w;
					file.res.h = target_h;
					file.convres = true;
					fileList.push(file);
					++totalFiles;
				} else if (bitrate > target_br * 1.5) {
					fileList.push(file);
					++totalFiles;
				} else {
					console.error(filename, "with resolution", meta.width, meta.height
						, "and bitrate", bitrate, "no need to be converted");
				}
			}
		}
	}
	console.log("Media files to be converted:", fileList);
} else {
	if (isMediaFile(arg)) {
		console.log(arg, "is individual file");
		// var file = {filename:filename, duration: duration, convres: convres};
		var filename = arg;
		var meta = getVideoMeta(filename);
		var duration = meta.duration * 1000000;
		var bitrate = meta.bit_rate;	// TODO: don't convert video with less than target.bitrate
		var convres = false;
		var file = {filename: filename, res: {w: target_w, h: target_h}
			,duration: duration, orig: {w:meta.width, h: meta.height}, convres: convres};

		if (meta.width > target_w && meta.height > target_h) {
			file.convres = true;
			fileList.push(file);
			++totalFiles;
		} else if (bitrate > target_br * 1.5) {
			fileList.push(file);
			++totalFiles;
		} else {
			console.error(filename, "with resolution", meta.width, meta.height
				, "and bitrate", bitrate, "no need to be converted");
		}
	} else {
		console.error("Not proper to be converted");
		process.exit();
	}
	console.log("Media file to be converted:", fileList);
}

if (fileList.length > 0) {
	runSeries(fileList, function(err) {
		if (err) {
			console.error(err);
		}
	});
}

function getVideoMeta(file) {
	var options = ["-v", "error", "-show_format", "-select_streams", "v:0", "-show_entries", "stream=width,height", "-of", "json", file];
	var getres = spawnSync("ffprobe", options);
	var meta = getres.stdout.toString();
	meta = JSON.parse(meta);
	var json = meta.streams[0];
	json.duration = meta.format.duration;
	json.bit_rate = meta.format.bit_rate;
	return json;
}

function processVideo(file, w, h, duration, convres, cb) {
	var options;
	var namearr = file.split(".");
	namearr[namearr.length -2] = namearr[namearr.length - 2] + target_name_tail;
	namearr[namearr.length -1] = target_name_ext;
	var output = namearr.join(".");
	if (convres) {
		options = ["-i", file, "-vf", "scale=" + w + ":" + h, "-b:v", target_br, "-max_muxing_queue_size", 4096, "-progress", "-", output];
	} else {
		options = ["-i", file, "-b:v",target_br , "-max_muxing_queue_size", 4096, "-progress", "-", output];
	}

	if (fs.existsSync(output)) {
		console.error(output, "already exists. Removing it");
		fs.unlinkSync(output);
	}

	var conv = spawn("ffmpeg", options);
	console.log("Start converting", file, "with", options.toString());
	var progressTotal = 100;
	var barTick = 0;
	var bar = new progress('  :title [:bar] :percent :etas', {
		complete: '=', incomplete: ' ', width: 100, total: progressTotal
	});
	var line = rl.createInterface({input: conv.stdout});
	line.on("line", function(l) {
		if (l.search("out_time_ms=") > -1) {
			var out_time_ms = Number(l.split("=")[1]);
			while (barTick/progressTotal < out_time_ms/duration) {
				bar.tick(1, {title: path.basename(file)});
				++barTick;
			}
		}
	});

	conv.stderr.on("data", function(data) {
		// console.error("convert error:", data.toString());
	});
	conv.stdout.on("data", function(data) {
		//console.log("convert data:", data.toString());
		// out_time_ms=15046531 => out_time = out_time_ms/1000000
		// elapsed time % = (out_time / duration) * 100
	});
	conv.stdout.on("end", function() {
	});
	conv.on('exit', function(code){
		line.close();
		console.log("\n", file, "conversion done with:", code);
		if (code === 0) {
			removeOriginal(file);
			// Notify user
			serviceEvent.emit("telegram", {cmd: "MESSAGE", payload: {msg: file + " conversion successfully done", disablenoti: false}});
			serviceEvent.emit("pushbullet", {cmd: "PUSH", payload: {title: "file conversion done", msg: file + " conversion successfully done"}});
		} else {
			console.error(file, "conversion aborted with error code:", code);
			// Notify user
			serviceEvent.emit("telegram", {cmd: "MESSAGE", payload: {msg: file + " conversion failed", disablenoti: false}});
			serviceEvent.emit("pushbullet", {cmd: "PUSH", payload: {title: "file conversion failed", msg: file + " conversion failed"}});
		}
		--totalFiles;

		if (totalFiles == 0) {
			console.log("#############################################");
			console.log("All files converted");
			console.log("#############################################");
			// Notify user
			serviceEvent.emit("telegram", {cmd: "MESSAGE", payload: {msg: "All files converted", disablenoti: false}});
			serviceEvent.emit("pushbullet", {cmd: "PUSH", payload: {title: "All files converted", msg: "All files converted"}});
		}
		if (cb) cb(true);
	});
}

function isMediaFile(name) {
	var ret = false;
	if (fs.lstatSync(name).isFile()) {
		var extList = source_formats;
		// .toUpperCase()
		var nameSplit = name.split(".");
		var extension = nameSplit[nameSplit.length -1];
		if (extList.indexOf(extension.toLowerCase()) > -1 && nameSplit[0].length > 0) {
			ret = true;
		}
		if (name.includes(target_name_tail + "." + target_name_ext)) {
			ret = false;
		}
	}
	return ret;
}

function removeOriginal(name) {
	if (removeoriginal && keepOrig == false) {
		try {
			fs.unlinkSync(name);
		} catch(e) {
			console.error("Error removing", name);
			console.error(e);
		}
		console.log(name, "removed successfully");
	}
}

function runSeries(fileMetaList, cb){
	var runNext = function(){
		var file = fileMetaList.shift();
		processVideo(file.filename, file.res.w, file.res.h, file.duration, file.convres, function(ret){
			if (ret) {
				if (fileMetaList.length) runNext();
				else cb(null);
			}
		});
	};
	runNext();
};

function msToTime(duration) {
	duration = duration / 1000;
	var milliseconds = parseInt((duration%1000)/100)
		, seconds = parseInt((duration/1000)%60)
		, minutes = parseInt((duration/(1000*60))%60)
		, hours = parseInt((duration/(1000*60*60))%24);

	hours = (hours < 10) ? "0" + hours : hours;
	minutes = (minutes < 10) ? "0" + minutes : minutes;
	seconds = (seconds < 10) ? "0" + seconds : seconds;

	return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
}


function gitPull(callback) {
	var child = spawn('git', ['--git-dir', gitdir, "--work-tree", gitworktree, 'pull']);
	var log = ""
	child.stderr.on('data', function(data) {
		console.log('err data: ' + data);
	});

	child.stdout.on('data', function(data) {
		log += data;
		console.log('stdout: ' + data);
	});
	child.on('exit', function(code){
		console.log('exit: ' + code);
		callback(code, log);
	});

};

function gitCheckout(head, callback) {
	var child = spawn('git', ['--git-dir', gitdir, "--work-tree", gitworktree, 'checkout', head]);
	var log = "";

	child.stderr.on('data', function(data) {
		//console.log('err data: ' + data);
	});

	child.stdout.on('data', function(data) {
		log += data;
		console.log('stdout: ' + data);
	});
	child.on('exit', function(code){
		callback(code, log);
	});
};

function getReleaseMeta(url, cb) {
	var req = http.get(url, function(res) {
		console.log('statusCode:', res.statusCode);
		var json = "";

		res.on("data", function(data) {
			json += data;
		});
		res.on("end", function(){
			try {
				json = JSON.parse(json);
			} catch(e) {
				console.error(e);
			}
			cb(res.statusCode, json);
		});
	});
}

function getCurrentVersion() {
	var getTag = spawnSync("git", ["--git-dir", gitdir, "--work-tree", gitworktree, "describe", "--tags", "--abbrev=0"]);
	var tag = getTag.stdout.toString().trim();
	return tag;
}

function needUpdate(remote_tag) {
	var needUpdate = false;
	var tag = getCurrentVersion();
	if (remote_tag !== tag) {
		needUpdate = true;
	} else console.log("Your mediaconverter is up to date");
	console.log("need update?", needUpdate, "(", remote_tag, ",", tag, ")");
	return needUpdate;
}

// 					var version = getCurrentVersion();
//					updateVersionFile(cachedVersionFile, version);
function updateVersion() {
	if (isVersionCacheExpired()) {
		getReleaseMeta(releaseUrl, function(code, meta) {
			if (code === 200) {
				if (needUpdate(meta.tag_name)) {
					gitCheckout("master", function(code, data) {
						if (code === 0) {
							gitPull(function(code, ret) {
								console.log("git pull ended with:", code, ret);
								if (code === 0) {
									gitCheckout(meta.tag_name, function(code, data) {
										console.log("git checkout to", meta.tag_name
												, "ended with", code);
											process.exit();
									});
								} else {
									console.error("git pull error:", code);
									process.exit();
								}
							});
						} else {
							console.error("git checkout master failed with", code);
							process.exit();
						}
					});
				} else {
					// No need to update but refresh version file
					console.log("No available update, just refresh version cache file");
					var version = getCurrentVersion();
					updateVersionFile(cachedVersionFile, version);
				}
			} else {
				console.error(code, "get meta error");
			}
		});
	} else {
		var version = fs.readFileSync(cachedVersionFile);
		version = version.toString().trim();
		console.log("Using cached version", version);
	}
}

// version caching
function getFileUpdateDate(path) {
	var stats = "";
	var ret = false;
	if (fs.existsSync(path)) {
		stats = fs.statSync(path);
		ret = stats.mtime;
	}
	return ret;
}
function timeDiff(old) {
	var difference = new Date().getTime() - old.getTime();

	var days = Math.floor(difference/1000/60/60/24);
	difference -= days * 1000 * 60 * 60 * 24;

	var hours = Math.floor(difference/1000/60/60);
	difference -= hours * 1000 * 60 * 60

	var minutes = Math.floor(difference/1000/60);
	difference -= minutes * 1000 * 60

	var seconds = Math.floor(difference/1000);
	var ret = {d: days, h: hours, m: minutes, s: seconds};
	return ret;
}

function updateVersionFile(file, version) {
	try {
		var saved = fs.writeFileSync(file, version);
		console.log("version", version, "saved");
	} catch(e) {
		console.error(e);
		process.exit();
	}
}

function isVersionCacheExpired() {
	var expired = false;
	var cached = getFileUpdateDate(cachedVersionFile);
	if (cached !== false) {
		var timediff = timeDiff(cached);
		if (timediff.d > 0) {
			expired = true;
			console.log("Cached version file expired");
		}
	} else {
		expired = true;
	}

	return expired;
}
